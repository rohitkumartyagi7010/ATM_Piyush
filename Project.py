{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c25b531-d3cb-4950-a762-0c5fb00d8c19",
   "metadata": {},
   "outputs": [],
   "source": [
    "import smtplib\n",
    "import random\n",
    "from win32com.client import Dispatch\n",
    "import mysql.connector\n",
    "from mysql.connector import Error\n",
    "\n",
    "# Database connection parameters\n",
    "db_host = \"localhost\"\n",
    "db_name = \"database_name\"\n",
    "db_user = \"root\"\n",
    "db_password = \"database_password\"\n",
    "\n",
    "# Email configuration\n",
    "sender_email = \"email_address\"\n",
    "sender_password = \"password\"\n",
    "smtp_server = \"smtp.gmail.com\"\n",
    "smtp_port = 587\n",
    "\n",
    "def send_email(recipient_email, subject, body):\n",
    "    try:\n",
    "        with smtplib.SMTP(smtp_server, smtp_port) as server:\n",
    "            server.starttls()\n",
    "            server.login(sender_email, sender_password)\n",
    "            message = f\"Subject: {subject}\\n\\n{body}\"\n",
    "            server.sendmail(sender_email, recipient_email, message)\n",
    "        print(f\"Email sent to {recipient_email}.\")\n",
    "    except Exception as e:\n",
    "        print(f\"Failed to send email: {e}\")\n",
    "\n",
    "try:\n",
    "    # Establish database connection\n",
    "    connection = mysql.connector.connect(\n",
    "        host=db_host,\n",
    "        database=db_name,\n",
    "        user=db_user,\n",
    "        password=db_password\n",
    "    )\n",
    "\n",
    "    if connection.is_connected():\n",
    "        print(\"Successfully connected to the database\")\n",
    "\n",
    "    speak = Dispatch(\"SAPI.SpVoice\")\n",
    "    speak.Voice = speak.GetVoices().Item(1)\n",
    "\n",
    "    def generate_and_send_code(email):\n",
    "        code = random.randint(100000, 999999)\n",
    "        subject = \"Your Verification Code\"\n",
    "        body = f\"Your verification code is {code}. Please use this code to proceed with your transaction.\"\n",
    "        send_email(email, subject, body)\n",
    "        return code\n",
    "\n",
    "    def withdraw_cash(account_data):\n",
    "        Account_Number, atm_pin, account_type, emailaddress, account_balance, Customer_name = account_data\n",
    "            \n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(\"SELECT Customer_name FROM accounts WHERE account_number = %s\", (Account_Number,))\n",
    "        account_data = cursor.fetchone()\n",
    "\n",
    "        speak.Speak(f\"Hi, {Customer_name}\")\n",
    "        print(f\"Hi, {Customer_name}\")\n",
    "\n",
    "        # Send verification code to user's email\n",
    "        email_code = generate_and_send_code(emailaddress)  # Assuming emailaddress field stores email\n",
    "\n",
    "        # Ask the user to input the code they received\n",
    "        speak.Speak(\"A verification code has been sent to your email. Please enter the code:\")\n",
    "        user_code = int(input(\"Enter the code you received: \"))\n",
    "\n",
    "        if user_code != email_code:\n",
    "            speak.Speak(\"Invalid code. Transaction aborted.\")\n",
    "            print(\"Invalid code. Transaction aborted.\")\n",
    "            return\n",
    "\n",
    "        speak.Speak(\"Enter the amount you want to withdraw\")\n",
    "        Amount = int(input(\"Enter the amount you want to withdraw: \"))\n",
    "\n",
    "        if account_balance > 0:\n",
    "            if (account_balance - Amount) > 0:\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(\"UPDATE accounts SET account_balance = account_balance - %s WHERE account_number = %s\", (Amount, Account_Number))\n",
    "                connection.commit()\n",
    "\n",
    "                # Insert transaction record\n",
    "                cursor.execute(\n",
    "                    \"INSERT INTO transactions (account_number, transaction_type, amount) VALUES (%s, %s, %s)\",\n",
    "                    (Account_Number, 'withdrawal', Amount)\n",
    "                )\n",
    "                connection.commit()\n",
    "\n",
    "                updated_balance = account_balance - Amount\n",
    "                speak.Speak(f\"You have withdrawn {Amount} rupees. Your updated balance is {updated_balance} rupees.\")\n",
    "                print(f\"You have withdrawn {Amount} rupees. Your updated balance is {updated_balance} rupees.\")\n",
    "            else:\n",
    "                speak.Speak(\"There is insufficient amount in Your Account\")\n",
    "                print(\"There is insufficient amount in Your Account\")\n",
    "        else:\n",
    "            speak.Speak(\"There is insufficient amount in Your Account\")\n",
    "            print(\"There is insufficient amount in Your Account\")\n",
    "        speak.Speak(\"Thank You, & Have a Good Day\")\n",
    "        print(\"Thank You, & Have a Good Day\")\n",
    "\n",
    "    def update_pin(account_data):\n",
    "        Account_Number, atm_pin, account_type, emailaddress, account_balance, Customer_name = account_data\n",
    "        speak.Speak(\"Enter your new PIN\")\n",
    "        new_pin = int(input(\"Enter your new PIN: \"))\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(\"UPDATE accounts SET atm_pin = %s WHERE account_number = %s\", (new_pin, Account_Number))\n",
    "        connection.commit()\n",
    "        speak.Speak(\"PIN updated successfully.\")\n",
    "        print(\"PIN updated successfully.\")\n",
    "\n",
    "    def create_new_account():\n",
    "        speak.Speak(\"Enter the new account details\")\n",
    "        Account_Number = int(input(\"Enter the new account number: \"))\n",
    "        atm_pin = int(input(\"Enter the new ATM PIN: \"))\n",
    "        account_type = input(\"Enter the account type: \")\n",
    "        emailaddress = input(\"Enter the email address: \")  # Changed to store email address\n",
    "        account_balance = int(input(\"Enter the initial balance: \"))\n",
    "        Customer_name = input(\"Enter the customer name: \")\n",
    "\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(\"INSERT INTO accounts (account_number, atm_pin, account_type, emailaddress, account_balance, Customer_name) VALUES (%s, %s, %s, %s, %s, %s)\",\n",
    "                       (Account_Number, atm_pin, account_type, emailaddress, account_balance, Customer_name))\n",
    "        connection.commit()\n",
    "        speak.Speak(\"Account created successfully.\")\n",
    "        print(\"Account created successfully.\")\n",
    "\n",
    "    def deposit_cash(account_data):\n",
    "        Account_Number, atm_pin, account_type, emailaddress, account_balance, Customer_name = account_data\n",
    "\n",
    "        speak.Speak(\"Enter the amount you want to deposit\")\n",
    "        Amount = int(input(\"Enter the amount you want to deposit: \"))\n",
    "\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(\"UPDATE accounts SET account_balance = account_balance + %s WHERE account_number = %s\", (Amount, Account_Number))\n",
    "        connection.commit()\n",
    "\n",
    "        # Insert transaction record\n",
    "        cursor.execute(\n",
    "            \"INSERT INTO transactions (account_number, transaction_type, amount) VALUES (%s, %s, %s)\",\n",
    "            (Account_Number, 'deposit', Amount)\n",
    "        )\n",
    "        connection.commit()\n",
    "\n",
    "        updated_balance = account_balance + Amount\n",
    "\n",
    "        # Send deposit notification email\n",
    "        subject = \"Deposit Successful\"\n",
    "        body = f\"Dear {Customer_name},\\n\\nYou have successfully deposited {Amount} rupees into your account. Your updated balance is {updated_balance} rupees.\\n\\nThank you for banking with us.\"\n",
    "        send_email(emailaddress, subject, body)\n",
    "\n",
    "        speak.Speak(f\"You have deposited {Amount} rupees. Your updated balance is {updated_balance} rupees.\")\n",
    "        print(f\"You have deposited {Amount} rupees. Your updated balance is {updated_balance} rupees.\")\n",
    "\n",
    "    def check_transactions(account_data):\n",
    "        Account_Number, atm_pin, account_type, emailaddress, account_balance, Customer_name = account_data\n",
    "\n",
    "        cursor = connection.cursor()\n",
    "        cursor.execute(\"SELECT * FROM transactions WHERE account_number = %s ORDER BY date DESC LIMIT 10\", (Account_Number,))\n",
    "        transactions = cursor.fetchall()\n",
    "\n",
    "        if transactions:\n",
    "            speak.Speak(\"Here are your last transactions:\")\n",
    "            for transaction in transactions:\n",
    "                print(transaction)\n",
    "        else:\n",
    "            speak.Speak(\"No transactions found.\")\n",
    "            print(\"No transactions found.\")\n",
    "\n",
    "    def taking_input():\n",
    "        while True:\n",
    "            speak.Speak(\"Welcome to the Bank Management System\")\n",
    "            print(\"Welcome to the Bank Management System\")\n",
    "            speak.Speak(\"Please select an option from the following:\")\n",
    "            print(\"\\n--- Bank Menu ---\")\n",
    "            print(\"1. Create new account\")\n",
    "            print(\"2. Update PIN\")\n",
    "            print(\"3. Withdraw cash\")\n",
    "            print(\"4. Deposit cash\")\n",
    "            print(\"5. Check transactions\")\n",
    "            print(\"6. Exit\")\n",
    "            choice = input(\"Enter your choice: \")\n",
    "\n",
    "            if choice == \"1\":\n",
    "                create_new_account()\n",
    "            elif choice == \"2\":\n",
    "                speak.Speak(\"Enter your account number:\")\n",
    "                Account_Number = int(input(\"Enter your account number: \"))\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(\"SELECT * FROM accounts WHERE account_number = %s\", (Account_Number,))\n",
    "                account_data = cursor.fetchone()\n",
    "                if account_data:\n",
    "                    update_pin(account_data)\n",
    "                else:\n",
    "                    speak.Speak(\"Account not found.\")\n",
    "                    print(\"Account not found.\")\n",
    "            elif choice == \"3\":\n",
    "                speak.Speak(\"Enter your account number:\")\n",
    "                Account_Number = int(input(\"Enter your account number: \"))\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(\"SELECT * FROM accounts WHERE account_number = %s\", (Account_Number,))\n",
    "                account_data = cursor.fetchone()\n",
    "                if account_data:\n",
    "                    speak.Speak(\"Enter your ATM PIN:\")\n",
    "                    Atm_Pin = int(input(\"Enter your ATM PIN: \"))\n",
    "                    if Atm_Pin == account_data[1]:\n",
    "                        withdraw_cash(account_data)\n",
    "                    else:\n",
    "                        speak.Speak(\"Incorrect PIN.\")\n",
    "                        print(\"Incorrect PIN.\")\n",
    "                else:\n",
    "                    speak.Speak(\"Account not found.\")\n",
    "                    print(\"Account not found.\")\n",
    "            elif choice == \"4\":\n",
    "                speak.Speak(\"Enter your account number:\")\n",
    "                Account_Number = int(input(\"Enter your account number: \"))\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(\"SELECT * FROM accounts WHERE account_number = %s\", (Account_Number,))\n",
    "                account_data = cursor.fetchone()\n",
    "                if account_data:\n",
    "                    speak.Speak(\"Enter your ATM PIN:\")\n",
    "                    Atm_Pin = int(input(\"Enter your ATM PIN: \"))\n",
    "                    if Atm_Pin == account_data[1]:\n",
    "                        deposit_cash(account_data)\n",
    "                    else:\n",
    "                        speak.Speak(\"Incorrect PIN.\")\n",
    "                        print(\"Incorrect PIN.\")\n",
    "                else:\n",
    "                    speak.Speak(\"Account not found.\")\n",
    "                    print(\"Account not found.\")\n",
    "            elif choice == \"5\":\n",
    "                speak.Speak(\"Enter your account number:\")\n",
    "                Account_Number = int(input(\"Enter your account number: \"))\n",
    "                cursor = connection.cursor()\n",
    "                cursor.execute(\"SELECT * FROM accounts WHERE account_number = %s\", (Account_Number,))\n",
    "                account_data = cursor.fetchone()\n",
    "                if account_data:\n",
    "                    check_transactions(account_data)\n",
    "                else:\n",
    "                    speak.Speak(\"Account not found.\")\n",
    "                    print(\"Account not found.\")\n",
    "            elif choice == \"6\":\n",
    "                speak.Speak(\"Thank you for using our services.\")\n",
    "                print(\"Thank you for using our services.\")\n",
    "                break\n",
    "            else:\n",
    "                speak.Speak(\"Invalid choice. Please try again.\")\n",
    "                print(\"Invalid choice. Please try again.\")\n",
    "\n",
    "    taking_input()\n",
    "\n",
    "except Error as e:\n",
    "    print(f\"An error occurred: {e}\")\n",
    "\n",
    "finally:\n",
    "    if connection.is_connected():\n",
    "        connection.close()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
